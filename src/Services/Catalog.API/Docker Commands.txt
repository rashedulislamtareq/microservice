docker ps
docker ps -a
docker pull mongo

$ docker run --name some-mongo -d mongo:tag

docker run -d -p 27017:27017 --name shopping-mongo mongo

docker exit

1
-- Now we can open interactive terminal for mongo

docker exec -it shopping-mongo /bin/bash

docker start cintainerID
2
-- After that, we are able to run mongo commands. 
Let me try with 

 - create database
 - create collection
 - add items into collection
 - list collection


ls
mongo
show dbs
use CatalogDb  --> for create db on mongo
db.createCollection('Products')  --> for create people collection

db.Products.insertMany([{ 'Name':'Asus Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':54.93 }, { 'Name':'HP Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':88.93 } ])

db.Products.insertMany(
			[
			    {
			        "Name": "Asus Laptop",
			        "Category": "Computers",
			        "Summary": "Summary",
			        "Description": "Description",
			        "ImageFile": "ImageFile",
			        "Price": 54.93
			    },
			    {
			        "Name": "HP Laptop",
			        "Category": "Computers",
			        "Summary": "Summary",
			        "Description": "Description",
			        "ImageFile": "ImageFile",
			        "Price": 88.93d
			    }
			])

db.Products.find({}).pretty()
db.Products.remove({})

show databases
show collections
db.Products.find({}).pretty()


-----------------------------------------------------
-----------------------------------------------------
-----------------------------------------------------

ls
docker ps
docker ps -a
docker rm a141
docker rmi a141
docker images

docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up -d



Docker Commands

Example docker hub pull :
	docker run -d --hostname swn-rabbit --name swn-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3-management

Single Container
For aspnetcore app after adding docker file -- for single container add docker file build and run = create new container
	$ docker build -t aspnetapp .
	$ docker run -d -p 8080:80 --name myapp aspnetapp

docker compose up
	This command run multiple container

Multi Container - docker-compose.yml
	docker-compose up
	docker-compose -f docker-compose.yaml -f docker-compose-infrastructure.yaml up --build

docker-compose -f docker-compose.yml -f docker-compose.override.yml up --build

2

DOCKER REMOVE ALL CONTAINER IMAGES PS -A

POWERSHELL commands

https://blog.baudson.de/blog/stop-and-remove-all-docker-containers-and-images

List all containers (only IDs)
docker ps -aq
Stop all running containers
docker stop $(docker ps -aq)
Remove all containers
docker rm $(docker ps -aq)
Remove all images
docker rmi $(docker images -q)
Remove all none images
docker system prune

-- You can also run all with copy paste

docker ps -aq
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)
docker rmi $(docker images -q) -f
docker system prune


Close all dockers and run with below command on that location;

	docker-compose -f docker-compose.yml -f docker-compose.override.yml up --build
	or
	docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
	docker-compose -f docker-compose.yml -f docker-compose.override.yml down
